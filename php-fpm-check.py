#!/usr/bin/env python
import argparse
import asyncio
import re
import struct
import sys
from functools import partial

# fmt: off
REQ_PAYLOAD = bytes([
    0x01, 0x01, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x01, 0x00, 0x43, 0x05, 0x00,
    0x0b, 0x09, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x4e, 0x41, 0x4d,
    0x45, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x0f, 0x09,
    0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x4e,
    0x41, 0x4d, 0x45, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70,
    0x0e, 0x03, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45,
    0x54, 0x48, 0x4f, 0x44, 0x47, 0x45, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00
])
# fmt: on

FCGI_STDOUT = 6

RESET = "\x1b[m"
ERROR = "\x1b[31m"
SUCCESS = "\x1b[32m"
INFO = "\x1b[33m"
DEBUG = "\x1b[36m"

PHP_VERSION_RE = re.compile(b"X-Powered-By: PHP/(?P<version>\S+)")

print = partial(print, file=sys.stderr, flush=True)


async def run(args: argparse.Namespace) -> None:
    success = False
    try:
        # async with asyncio.timeout(args.timeout):
        reader, writer = await asyncio.open_connection(args.host, args.port)
        writer.write(REQ_PAYLOAD)
        await writer.drain()
        response = await reader.read(1024)
        print(f"{DEBUG}[D] {response=}{RESET}")
        try:
            fcgi_version, fcgi_type = struct.unpack("<BB", response[:2])
            assert fcgi_version == 1
            assert fcgi_type == FCGI_STDOUT
            success = True
        except (struct.error, AssertionError):
            print(f"{ERROR}[!] Malformed FastCGI response{RESET}")
        writer.close()
        await writer.wait_closed()
        if success:
            print(f"{SUCCESS}[+] PHP-FPM open port detected!{RESET}")
            if m := PHP_VERSION_RE.search(response):
                print(
                    f"{INFO}[I] PHP Version: {m.group('version').decode()}{RESET}"
                )
            return
    except Exception as ex:
        print(f"{ERROR}[!] {ex}{RESET}")
    sys.exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "host",
        help="php-fpm host or ip address",
    )
    parser.add_argument(
        "-p",
        "--port",
        help="php-fpm port",
        type=int,
        default=9000,
    )
    parser.add_argument(
        "-t",
        "--timeout",
        help="total timeout seconds",
        type=float,
        default=15.0,
    )
    args = parser.parse_args()
    asyncio.run(run(args))
